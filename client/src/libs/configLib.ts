const {
  SNOWPACK_PUBLIC_AWS_REGION,
  SNOWPACK_PUBLIC_CLIENT_DATA_BUCKET,
  SNOWPACK_PUBLIC_USER_POOL_ID,
  SNOWPACK_PUBLIC_APP_CLIENT_ID,
  SNOWPACK_PUBLIC_IDENTITY_POOL_ID,
  SNOWPACK_PUBLIC_FILES_API_ENDPOINT,
}: Record<string, string> = import.meta.env

const throwMissingEnvError = (varName: string) => {
  throw new Error(
    `Cannot find env variable ${varName}. Please ensure that ${varName} is set in .env file.`
  )
}

// TODO make more DRY if possible

if (!SNOWPACK_PUBLIC_AWS_REGION) {
  throwMissingEnvError('SNOWPACK_PUBLIC_AWS_REGION')
}

if (!SNOWPACK_PUBLIC_USER_POOL_ID) {
  throwMissingEnvError('SNOWPACK_PUBLIC_CLIENT_DATA_BUCKET')
}

if (!SNOWPACK_PUBLIC_APP_CLIENT_ID) {
  throwMissingEnvError('SNOWPACK_PUBLIC_APP_CLIENT_ID')
}

if (!SNOWPACK_PUBLIC_IDENTITY_POOL_ID) {
  throwMissingEnvError('SNOWPACK_PUBLIC_IDENTITY_POOL_ID')
}

if (!SNOWPACK_PUBLIC_FILES_API_ENDPOINT) {
  throwMissingEnvError('SNOWPACK_PUBLIC_FILES_API_ENDPOINT')
}

export {
  SNOWPACK_PUBLIC_AWS_REGION,
  SNOWPACK_PUBLIC_CLIENT_DATA_BUCKET,
  SNOWPACK_PUBLIC_USER_POOL_ID,
  SNOWPACK_PUBLIC_APP_CLIENT_ID,
  SNOWPACK_PUBLIC_IDENTITY_POOL_ID,
  SNOWPACK_PUBLIC_FILES_API_ENDPOINT,
}
